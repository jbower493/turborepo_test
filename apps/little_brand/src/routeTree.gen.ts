/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutUsImport } from './routes/about-us'
import { Route as IndexImport } from './routes/index'
import { Route as ServicesIndexImport } from './routes/services/index'
import { Route as InvoicesIndexImport } from './routes/invoices/index'
import { Route as ServicesServiceIdIndexImport } from './routes/services/$serviceId/index'
import { Route as InvoicesInvoiceIdIndexImport } from './routes/invoices/$invoiceId/index'

// Create/Update Routes

const AboutUsRoute = AboutUsImport.update({
  id: '/about-us',
  path: '/about-us',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ServicesIndexRoute = ServicesIndexImport.update({
  id: '/services/',
  path: '/services/',
  getParentRoute: () => rootRoute,
} as any)

const InvoicesIndexRoute = InvoicesIndexImport.update({
  id: '/invoices/',
  path: '/invoices/',
  getParentRoute: () => rootRoute,
} as any)

const ServicesServiceIdIndexRoute = ServicesServiceIdIndexImport.update({
  id: '/services/$serviceId/',
  path: '/services/$serviceId/',
  getParentRoute: () => rootRoute,
} as any)

const InvoicesInvoiceIdIndexRoute = InvoicesInvoiceIdIndexImport.update({
  id: '/invoices/$invoiceId/',
  path: '/invoices/$invoiceId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about-us': {
      id: '/about-us'
      path: '/about-us'
      fullPath: '/about-us'
      preLoaderRoute: typeof AboutUsImport
      parentRoute: typeof rootRoute
    }
    '/invoices/': {
      id: '/invoices/'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof InvoicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/services/': {
      id: '/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/invoices/$invoiceId/': {
      id: '/invoices/$invoiceId/'
      path: '/invoices/$invoiceId'
      fullPath: '/invoices/$invoiceId'
      preLoaderRoute: typeof InvoicesInvoiceIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/services/$serviceId/': {
      id: '/services/$serviceId/'
      path: '/services/$serviceId'
      fullPath: '/services/$serviceId'
      preLoaderRoute: typeof ServicesServiceIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about-us': typeof AboutUsRoute
  '/invoices': typeof InvoicesIndexRoute
  '/services': typeof ServicesIndexRoute
  '/invoices/$invoiceId': typeof InvoicesInvoiceIdIndexRoute
  '/services/$serviceId': typeof ServicesServiceIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about-us': typeof AboutUsRoute
  '/invoices': typeof InvoicesIndexRoute
  '/services': typeof ServicesIndexRoute
  '/invoices/$invoiceId': typeof InvoicesInvoiceIdIndexRoute
  '/services/$serviceId': typeof ServicesServiceIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about-us': typeof AboutUsRoute
  '/invoices/': typeof InvoicesIndexRoute
  '/services/': typeof ServicesIndexRoute
  '/invoices/$invoiceId/': typeof InvoicesInvoiceIdIndexRoute
  '/services/$serviceId/': typeof ServicesServiceIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about-us'
    | '/invoices'
    | '/services'
    | '/invoices/$invoiceId'
    | '/services/$serviceId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about-us'
    | '/invoices'
    | '/services'
    | '/invoices/$invoiceId'
    | '/services/$serviceId'
  id:
    | '__root__'
    | '/'
    | '/about-us'
    | '/invoices/'
    | '/services/'
    | '/invoices/$invoiceId/'
    | '/services/$serviceId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutUsRoute: typeof AboutUsRoute
  InvoicesIndexRoute: typeof InvoicesIndexRoute
  ServicesIndexRoute: typeof ServicesIndexRoute
  InvoicesInvoiceIdIndexRoute: typeof InvoicesInvoiceIdIndexRoute
  ServicesServiceIdIndexRoute: typeof ServicesServiceIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutUsRoute: AboutUsRoute,
  InvoicesIndexRoute: InvoicesIndexRoute,
  ServicesIndexRoute: ServicesIndexRoute,
  InvoicesInvoiceIdIndexRoute: InvoicesInvoiceIdIndexRoute,
  ServicesServiceIdIndexRoute: ServicesServiceIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about-us",
        "/invoices/",
        "/services/",
        "/invoices/$invoiceId/",
        "/services/$serviceId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about-us": {
      "filePath": "about-us.tsx"
    },
    "/invoices/": {
      "filePath": "invoices/index.tsx"
    },
    "/services/": {
      "filePath": "services/index.tsx"
    },
    "/invoices/$invoiceId/": {
      "filePath": "invoices/$invoiceId/index.tsx"
    },
    "/services/$serviceId/": {
      "filePath": "services/$serviceId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
